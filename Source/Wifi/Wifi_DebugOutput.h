#pragma once
#include <nm-device-wifi.h>

/** 
 * @file  Wifi_DebugOutput.h
 * 
 * @brief Converts assorted Wifi-related enums to text for debug output.
 */


const char* nmStateString(NMState state)
{
    switch (state)
    {
        case NM_STATE_UNKNOWN:
            return "NM_STATE_UNKNOWN";
        case NM_STATE_ASLEEP:
            return "NM_STATE_ASLEEP";
        case NM_STATE_DISCONNECTED:
            return "NM_STATE_DISCONNECTED";
        case NM_STATE_DISCONNECTING:
            return "NM_STATE_DISCONNECTING";
        case NM_STATE_CONNECTING:
            return "NM_STATE_CONNECTING";
        case NM_STATE_CONNECTED_LOCAL:
            return "NM_STATE_CONNECTED_LOCAL";
        case NM_STATE_CONNECTED_SITE:
            return "NM_STATE_CONNECTED_SITE";
        case NM_STATE_CONNECTED_GLOBAL:
            return "NM_STATE_CONNECTED_GLOBAL";
    }
    return "[Unknown NMState!]";
}

const char * nmConnectivityStateString(NMConnectivityState state)
{
    switch (state)
    {
        case NM_CONNECTIVITY_UNKNOWN:
            return "NM_CONNECTIVITY_UNKNOWN";
        case NM_CONNECTIVITY_NONE:
            return "NM_CONNECTIVITY_NONE";
        case NM_CONNECTIVITY_PORTAL:
            return "NM_CONNECTIVITY_PORTAL";
        case NM_CONNECTIVITY_LIMITED:
            return "NM_CONNECTIVITY_LIMITED";
        case NM_CONNECTIVITY_FULL:
            return "NM_CONNECTIVITY_FULL";
    }
    return "[Unknown NMConnectivityState!]";
}

const char * deviceStateString(NMDeviceState state)
{
    switch (state)
    {
        case NM_DEVICE_STATE_ACTIVATED:
            return "NM_DEVICE_STATE_ACTIVATED";
        case NM_DEVICE_STATE_PREPARE:
            return "NM_DEVICE_STATE_PREPARE";
        case NM_DEVICE_STATE_CONFIG:
            return "NM_DEVICE_STATE_CONFIG";
        case NM_DEVICE_STATE_IP_CONFIG:
            return "NM_DEVICE_STATE_IP_CONFIG";
        case NM_DEVICE_STATE_IP_CHECK:
            return "NM_DEVICE_STATE_IP_CHECK";
        case NM_DEVICE_STATE_SECONDARIES:
            return "NM_DEVICE_STATE_SECONDARIES";
        case NM_DEVICE_STATE_NEED_AUTH:
            return "NM_DEVICE_STATE_NEED_AUTH";
        case NM_DEVICE_STATE_DISCONNECTED:
            return "NM_DEVICE_STATE_DISCONNECTED";
        case NM_DEVICE_STATE_DEACTIVATING:
            return "NM_DEVICE_STATE_DEACTIVATING";
        case NM_DEVICE_STATE_FAILED:
            return "NM_DEVICE_STATE_FAILED";
        case NM_DEVICE_STATE_UNKNOWN:
            return "NM_DEVICE_STATE_UNKNOWN";
        case NM_DEVICE_STATE_UNMANAGED:
            return "NM_DEVICE_STATE_UNMANAGED";
        case NM_DEVICE_STATE_UNAVAILABLE:
            return "NM_DEVICE_STATE_UNAVAILABLE";
    }
    return "[Unknown NMDeviceState!]";
}

const char * deviceStateReasonString(NMDeviceStateReason stateReason)
{
    switch (stateReason)
    {
        case NM_DEVICE_STATE_REASON_NONE:
            return "NM_DEVICE_STATE_REASON_NONE";
        case NM_DEVICE_STATE_REASON_UNKNOWN:
            return "NM_DEVICE_STATE_REASON_UNKNOWN";
        case NM_DEVICE_STATE_REASON_NOW_MANAGED:
            return "NM_DEVICE_STATE_REASON_NOW_MANAGED";
        case NM_DEVICE_STATE_REASON_NOW_UNMANAGED:
            return "NM_DEVICE_STATE_REASON_NOW_UNMANAGED";
        case NM_DEVICE_STATE_REASON_CONFIG_FAILED:
            return "NM_DEVICE_STATE_REASON_CONFIG_FAILED";
        case NM_DEVICE_STATE_REASON_IP_CONFIG_UNAVAILABLE:
            return "NM_DEVICE_STATE_REASON_IP_CONFIG_UNAVAILABLE";
        case NM_DEVICE_STATE_REASON_IP_CONFIG_EXPIRED:
            return "NM_DEVICE_STATE_REASON_IP_CONFIG_EXPIRED";
        case NM_DEVICE_STATE_REASON_NO_SECRETS:
            return "NM_DEVICE_STATE_REASON_NO_SECRETS";
        case NM_DEVICE_STATE_REASON_SUPPLICANT_DISCONNECT:
            return "NM_DEVICE_STATE_REASON_SUPPLICANT_DISCONNECT";
        case NM_DEVICE_STATE_REASON_SUPPLICANT_CONFIG_FAILED:
            return "NM_DEVICE_STATE_REASON_SUPPLICANT_CONFIG_FAILED";
        case NM_DEVICE_STATE_REASON_SUPPLICANT_FAILED:
            return "NM_DEVICE_STATE_REASON_SUPPLICANT_FAILED";
        case NM_DEVICE_STATE_REASON_SUPPLICANT_TIMEOUT:
            return "NM_DEVICE_STATE_REASON_SUPPLICANT_TIMEOUT";
        case NM_DEVICE_STATE_REASON_PPP_START_FAILED:
            return "NM_DEVICE_STATE_REASON_PPP_START_FAILED";
        case NM_DEVICE_STATE_REASON_PPP_DISCONNECT:
            return "NM_DEVICE_STATE_REASON_PPP_DISCONNECT";
        case NM_DEVICE_STATE_REASON_PPP_FAILED:
            return "NM_DEVICE_STATE_REASON_PPP_FAILED";
        case NM_DEVICE_STATE_REASON_DHCP_START_FAILED:
            return "NM_DEVICE_STATE_REASON_DHCP_START_FAILED";
        case NM_DEVICE_STATE_REASON_DHCP_ERROR:
            return "NM_DEVICE_STATE_REASON_DHCP_ERROR";
        case NM_DEVICE_STATE_REASON_DHCP_FAILED:
            return "NM_DEVICE_STATE_REASON_DHCP_FAILED";
        case NM_DEVICE_STATE_REASON_SHARED_START_FAILED:
            return "NM_DEVICE_STATE_REASON_SHARED_START_FAILED";
        case NM_DEVICE_STATE_REASON_SHARED_FAILED:
            return "NM_DEVICE_STATE_REASON_SHARED_FAILED";
        case NM_DEVICE_STATE_REASON_AUTOIP_START_FAILED:
            return "NM_DEVICE_STATE_REASON_AUTOIP_START_FAILED";
        case NM_DEVICE_STATE_REASON_AUTOIP_ERROR:
            return "NM_DEVICE_STATE_REASON_AUTOIP_ERROR";
        case NM_DEVICE_STATE_REASON_AUTOIP_FAILED:
            return "NM_DEVICE_STATE_REASON_AUTOIP_FAILED";
        case NM_DEVICE_STATE_REASON_MODEM_BUSY:
            return "NM_DEVICE_STATE_REASON_MODEM_BUSY";
        case NM_DEVICE_STATE_REASON_MODEM_NO_DIAL_TONE:
            return "NM_DEVICE_STATE_REASON_MODEM_NO_DIAL_TONE";
        case NM_DEVICE_STATE_REASON_MODEM_NO_CARRIER:
            return "NM_DEVICE_STATE_REASON_MODEM_NO_CARRIER";
        case NM_DEVICE_STATE_REASON_MODEM_DIAL_TIMEOUT:
            return "NM_DEVICE_STATE_REASON_MODEM_DIAL_TIMEOUT";
        case NM_DEVICE_STATE_REASON_MODEM_DIAL_FAILED:
            return "NM_DEVICE_STATE_REASON_MODEM_DIAL_FAILED";
        case NM_DEVICE_STATE_REASON_MODEM_INIT_FAILED:
            return "NM_DEVICE_STATE_REASON_MODEM_INIT_FAILED";
        case NM_DEVICE_STATE_REASON_GSM_APN_FAILED:
            return "NM_DEVICE_STATE_REASON_GSM_APN_FAILED";
        case NM_DEVICE_STATE_REASON_GSM_REGISTRATION_NOT_SEARCHING:
            return "NM_DEVICE_STATE_REASON_GSM_REGISTRATION_NOT_SEARCHING";
        case NM_DEVICE_STATE_REASON_GSM_REGISTRATION_DENIED:
            return "NM_DEVICE_STATE_REASON_GSM_REGISTRATION_DENIED";
        case NM_DEVICE_STATE_REASON_GSM_REGISTRATION_TIMEOUT:
            return "NM_DEVICE_STATE_REASON_GSM_REGISTRATION_TIMEOUT";
        case NM_DEVICE_STATE_REASON_GSM_REGISTRATION_FAILED:
            return "NM_DEVICE_STATE_REASON_GSM_REGISTRATION_FAILED";
        case NM_DEVICE_STATE_REASON_GSM_PIN_CHECK_FAILED:
            return "NM_DEVICE_STATE_REASON_GSM_PIN_CHECK_FAILED";
        case NM_DEVICE_STATE_REASON_FIRMWARE_MISSING:
            return "NM_DEVICE_STATE_REASON_FIRMWARE_MISSING";
        case NM_DEVICE_STATE_REASON_REMOVED:
            return "NM_DEVICE_STATE_REASON_REMOVED";
        case NM_DEVICE_STATE_REASON_SLEEPING:
            return "NM_DEVICE_STATE_REASON_SLEEPING";
        case NM_DEVICE_STATE_REASON_CONNECTION_REMOVED:
            return "NM_DEVICE_STATE_REASON_CONNECTION_REMOVED";
        case NM_DEVICE_STATE_REASON_USER_REQUESTED:
            return "NM_DEVICE_STATE_REASON_USER_REQUESTED";
        case NM_DEVICE_STATE_REASON_CARRIER:
            return "NM_DEVICE_STATE_REASON_CARRIER";
        case NM_DEVICE_STATE_REASON_CONNECTION_ASSUMED:
            return "NM_DEVICE_STATE_REASON_CONNECTION_ASSUMED";
        case NM_DEVICE_STATE_REASON_SUPPLICANT_AVAILABLE:
            return "NM_DEVICE_STATE_REASON_SUPPLICANT_AVAILABLE";
        case NM_DEVICE_STATE_REASON_MODEM_NOT_FOUND:
            return "NM_DEVICE_STATE_REASON_MODEM_NOT_FOUND";
        case NM_DEVICE_STATE_REASON_BT_FAILED:
            return "NM_DEVICE_STATE_REASON_BT_FAILED";
        case NM_DEVICE_STATE_REASON_GSM_SIM_NOT_INSERTED:
            return "NM_DEVICE_STATE_REASON_GSM_SIM_NOT_INSERTED";
        case NM_DEVICE_STATE_REASON_GSM_SIM_PIN_REQUIRED:
            return "NM_DEVICE_STATE_REASON_GSM_SIM_PIN_REQUIRED";
        case NM_DEVICE_STATE_REASON_GSM_SIM_PUK_REQUIRED:
            return "NM_DEVICE_STATE_REASON_GSM_SIM_PUK_REQUIRED";
        case NM_DEVICE_STATE_REASON_GSM_SIM_WRONG:
            return "NM_DEVICE_STATE_REASON_GSM_SIM_WRONG";
        case NM_DEVICE_STATE_REASON_INFINIBAND_MODE:
            return "NM_DEVICE_STATE_REASON_INFINIBAND_MODE";
        case NM_DEVICE_STATE_REASON_DEPENDENCY_FAILED:
            return "NM_DEVICE_STATE_REASON_DEPENDENCY_FAILED";
        case NM_DEVICE_STATE_REASON_BR2684_FAILED:
            return "NM_DEVICE_STATE_REASON_BR2684_FAILED";
        case NM_DEVICE_STATE_REASON_MODEM_MANAGER_UNAVAILABLE:
            return "NM_DEVICE_STATE_REASON_MODEM_MANAGER_UNAVAILABLE";
        case NM_DEVICE_STATE_REASON_SSID_NOT_FOUND:
            return "NM_DEVICE_STATE_REASON_SSID_NOT_FOUND";
        case NM_DEVICE_STATE_REASON_SECONDARY_CONNECTION_FAILED:
            return "NM_DEVICE_STATE_REASON_SECONDARY_CONNECTION_FAILED";
        case NM_DEVICE_STATE_REASON_DCB_FCOE_FAILED:
            return "NM_DEVICE_STATE_REASON_DCB_FCOE_FAILED";
        case NM_DEVICE_STATE_REASON_TEAMD_CONTROL_FAILED:
            return "NM_DEVICE_STATE_REASON_TEAMD_CONTROL_FAILED";
        case NM_DEVICE_STATE_REASON_MODEM_FAILED:
            return "NM_DEVICE_STATE_REASON_MODEM_FAILED";
        case NM_DEVICE_STATE_REASON_MODEM_AVAILABLE:
            return "NM_DEVICE_STATE_REASON_MODEM_AVAILABLE";
        case NM_DEVICE_STATE_REASON_SIM_PIN_INCORRECT:
            return "NM_DEVICE_STATE_REASON_SIM_PIN_INCORRECT";
            /*
        case NM_DEVICE_STATE_REASON_NEW_ACTIVATION:
            return "NM_DEVICE_STATE_REASON_NEW_ACTIVATION";
        case NM_DEVICE_STATE_REASON_PARENT_CHANGED:
            return "NM_DEVICE_STATE_REASON_PARENT_CHANGED";           
        case NM_DEVICE_STATE_REASON_PARENT_MANAGED_CHANGED:
            return "NM_DEVICE_STATE_REASON_PARENT_MANAGED_CHANGED";            
             */
        default:
            return "[Unknown NMDeviceStateReason!]";
    }
    return "[Unknown NMDeviceStateReason!]";
}
   
const char * activeConnectionStateString(NMActiveConnectionState state)
{
    switch(state)
    {
        case NM_ACTIVE_CONNECTION_STATE_UNKNOWN:
            return "NM_ACTIVE_CONNECTION_STATE_UNKNOWN";
        case NM_ACTIVE_CONNECTION_STATE_ACTIVATING:
            return "NM_ACTIVE_CONNECTION_STATE_ACTIVATING";
        case NM_ACTIVE_CONNECTION_STATE_ACTIVATED:
            return "NM_ACTIVE_CONNECTION_STATE_ACTIVATED";
        case NM_ACTIVE_CONNECTION_STATE_DEACTIVATING:
            return "NM_ACTIVE_CONNECTION_STATE_DEACTIVATING";
        case NM_ACTIVE_CONNECTION_STATE_DEACTIVATED:
            return "NM_ACTIVE_CONNECTION_STATE_DEACTIVATED";
    }
    return "[Unknown NMActiveConnectionState!]";
}
