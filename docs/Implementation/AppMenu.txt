# New AppMenu format implementation
    ## Implement:
        -AppMenu::MenuButton
        -AppMenu::FolderComponent
        -AppMenu::MenuComponent
        -AppMenu::InputHandler
        -AppMenu::Initializer
    ## Additional requirements: 
        -Add the new format to the Appmenu::Format enum class in AppMenu.h 
        -Update the configValueChanged method in 
         AppMenu/Components/MainComponent.cpp to create the new format's 
         initializer.
        -Add the new format's identifier string to formatStrings in
         AppMenu/Data/JSON/ConfigKeys.h
    ## MenuButton
        ### Implement:
            -Rectangle<float> findTitleBounds();
                Return the bounding rectangle relative to the button bounds 
                where the menu item's title should be drawn.

            -Rectangle<float> findIconBounds();
                Return the bounding rectangle relative to the button bounds
                where the menu item's icon should be drawn.
              
            -bool shouldDrawBorder() const;
                Return whether the menu button's border should be drawn.

            -bool shouldFillBackground() const;
                Return whether the menu button's background should be filled.

            -Justification getTextJustification() const;
                Return the justification type to use when printing button text.
    
        ### Optional overrides:
            -Font findTitleFont(const Rectangle<float>& titleBounds);
                Override to change how the button's title font is updated.

            -int findTitleBGWidth(const Rectangle<float>& titleBounds, const Font& titleFont);
                Override to change how the width of the title background area
                is calculated, or to disable drawing a background area behind
                the title entirely.

            -void menuButtonResized() { }
                Override to add additional actions the button object should
                perform each time its bounds change.

    ## FolderComponent
        ### Implement:
            -int closestIndex(const int xPos, const int yPos);
                Find the closest folder index to an empty spot on the
                FolderComponent that was clicked.
            -MenuButton* createMenuButton(const MenuItem folderItem);
                Create an instance of your format's MenuButton subclass
            -void updateButtonLayout();
                Update the layout of all buttons in the menu to fit the current
                menu bounds, selected button, and any other factors this Format
                cares about.

    ## MenuComponent
        ### Implement:
            -FolderComponent* createFolderComponent(MenuItem folderItem);
                Create a folder component as this menu format's 
                AppMenu::FolderComponent class.

            -Rectangle<int> getFolderBounds(const int folderIndex, const bool closingFolder)
                Return appropriate bounds for one folder component, to be used
                when updating the layout of all folders.

            -int getAnimationDuration() const;
                Return the duration in milliseconds to use when animating menu
                layout updates.

            -void parentResized(const juce::Rectangle<int> parentBounds)
                Update the menu's bounds when its parent component is resized.

    ## InputHandler
        ### Implement:
            -bool keyPress(const KeyType keyType)
                Handle menu key press events.
                
        ### Optional overrides:
            -void menuItemClicked(const MenuButton* clickedButton, const bool rightClicked);
                Override to change how the menu behaves when MenuButtons are
                clicked.

            -void folderClicked(const FolderComponent* clickedFolder, const int closestIndex, const bool rightClicked);
                Override to change how the menu behaves when folders are clicked.

            -void menuClicked(const bool rightClicked)
                Override to change how the menu behaves when the main menu
                component is clicked.


    ## Initializer
        ### Implement:
            -Format getMenuFormat() const;
                Return the new menu Format type.

            -MenuComponent* createMenuComponent() const;
                Create a new NewFormat::MenuComponent.

            -InputHandler* createInputHandler(MenuComponent* const menuComponent, Controller* const controller) const;
                Create a new NewFormat::InputHandler
