# Pocket-home: Bismuth Edition Task List

### Documentation

    1. Update README.md, documenting all major features and improvements.
        -Find and document all hidden dependencies, including ones met by
         default by every PocketCHIP.
        -List all optional dependencies.
    2. Create a list of all code files, and use it to systematically check
       existing documentation.
    3. Create a Markdown page outlining the entire project structure.
    4. Create pages documenting each code group.
    5. Document all config files and options.
    6. Generate UML diagrams.
        
## Misc. bug fixes and improvements
    -Define missing ColourId values for custom component classes.
    -Recreate ResourceManager as a template class ResourceManager<SharedResourceType> to cut down on duplicate code.
    -Figure out why the "file" label in the file selection window gets cut off.

#### Known documentation issues for individual classes

    -AppMenu helper classes are missing full documentation.
    -PokeLookAndFeel.h is missing some @param tags.

### Version Management

# Task list for release 0.10

## Wifi Improvements

    1. Fix wifi error: libnm-glib-WARNING nm-access-point.c:310 ap_ssid == NULL
    2. Fix missing access point name bug that seems to be linked to changing
       access points while staying on the same network.
    3. Track down rare segfault after repeated assertion failure at WifiSettingsPage.cpp:189
    4. Update the HomePage wifi icon to better use new wifi features.
       1. Add a Listener interface to WifiAccessPoint objects.
       2. Have the wifi icon extend WifiAccessPoint::Listener.
    5. Make the wifi page regularly scan for updates when open.
    6. Add a "Forget saved connection" button to saved wifi access points.

## AppMenu Improvements

    1. Increase encapsulation: enforce strict Menu->Folder->Button hierarchy.
    2. Separate AppMenuButton classes from AppMenuFolder classes.
    3. Create separate classes to handle keyboard controls.
    4. Create a separate class to handle popup menus.
    5. For each menu type, create a custom Component for the HomeSettingsPage
       that provides controls for its specific properties.
    6. Design and implement TabbedAppMenu.

## FreeDesktop Standards/ DesktopEntry Improvements

    -Read DesktopEntry data values using a key->function map.
    -Enforce thorough implementation of the Desktop entry standard.
    -Add support for .Desktop Actions

## Configuration Improvements

    1. Improve handling of invalid types in config files.
    2. Provide methods for easily reverting part or all of a config file to
       default values.
    -AppConfigFile Improvements
        1. Assign hidden id values to each folder and shortcut so they can be
           looked up easily in the config file.
        2. Give folders the ability to contain shortcuts and other folders.

## Settings Page Improvements

### Quick Settings Page

    1. Restore the IP address label.
    2. Replace the SettingsListPage opening button with an icon.

### DateTime Page

    1. Remove this page until admin/authentication handling is implemented.
    2. Consider restoring with built-in date/time setting components.

### Home Settings Page

    1. Move the clock settings to this page from the DateTime page.
    2. Add options to show/hide the battery icon and wifi icon.
    3. Change the page background settings to control background image only.

### Input Page

    1. Remove FN key fix - it doesn't seem to actually fix anything.
 
### Password Pages

    1. The set password page isn`t hiding the current password field.
    2. Fix issue where the program hangs on authentication in PocketCHIP.

### Colour Page

    1. Add the color page to the settings list page.
    2. Add missing ColourID values to custom component classes.
    3. Adjust color picker and color list components.
    4. Save and apply changes through ColourConfigFile.

# Unscheduled future improvements

## Admin and Authentication
    1. Write a setuid program to handle root actions.
        -Updating the application password.
        -Saving calibration data. 
    2. Create custom PolKit policies for interacting with the setuid program.
    3. Look into implementing a custom PolKit authentication agent.

## Keybinding Controls
    -Decide on implementation approach, add to input settings page.

## Component editing
    -Consider a custom page for this.
    -Support for editing configurableComponents
    -Directly set font size.

## Icons
    -Add an icon selection Component that uses IconThread's index of icon files
        1. Create a method that loads all available icon names from icon
           directories and cache files.
        2. Create a list component that displays all available icons.
        3. Create a popup editor component, containing that list component and
           a field for entering misc. icon paths.
    -Add .xpm image support
    -Fix rendering issues with some .svg icons

## Bluetooth
    1. Study [bluez bluetooth code.]: https://git.kernel.org/pub/scm/bluetooth/bluez.git/tree/client/main.c
    2. Implement all basic bluetooth functionality.
        1. Detecting if bluetooth is enabled.
        2. Enabling and disabling the bluetooth radio.
        3. Listing all connected, paired, visible, and saved bluetooth devices.
        4. Pairing with new bluetooth devices.
        5. Setting the bluetooth radio as discoverable.
    3. Implement BluetoothSettingComponent and BluetoothSettingPage
    4. Research bluetooth file transfer to see if pocket-home should handle it.

## Multi-System Support 
    -Test pocket-home on all of my linux devices.
    -Define all system commands in a single .json file in assets
        (*not* editable without admin permissions!) 
    -List all pocket-home functionality that is PocketCHIP specific
    -Create a class that scans for various system features
        -Wifi
        -Bluetooth
        -Controllable backlight
        -Audio support
        -Flashing support
        -Input options
    -Create a class that can automatically disable a component if one or more
     of these features is not available
    -Ensure that everything controllable by touch/mouse input can also be controlled by keyboard input, and vice versa.
